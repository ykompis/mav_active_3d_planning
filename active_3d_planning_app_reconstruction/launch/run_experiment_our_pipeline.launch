<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>

  <!-- Planner startup delay -->
  <arg name="delay" default="5.0"/>

  <!-- TOPICS -->
  <arg name="odometry_topic"             default="ground_truth/odometry"/> <!-- odometry_sensor1/odometry -->
  <arg name="image_topic"                default="vrglasses_for_robots_ros/color_map"/>
  <arg name="depth_image_topic"          default="vrglasses_for_robots_ros/depth_map"/>


  <!--  Planner arguments (can use a single config or compose the planner)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_config" default="planners/example_config.yaml"/>
  <arg name="verbose_planner" default="true"/>
  <arg name="visualize" default="true"/>

  <!--  Experiment arguments -->
  <arg name="experiment_config" default="CityBuilding.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <arg name="data_directory" default="/home/user/Documents/Data"/>
  <arg name="data_frequency" default="30.0" />
  <arg name="time_limit" default="20" />


  <!-- Setup experiment params, data, nodes -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>

  <group ns="eval">

    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/$(arg mav_name)/planner_node" />
      <param name="ns_voxblox" value="/$(arg mav_name)/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" />
    </node>

  </group>


  <group ns="$(arg mav_name)">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">

      <remap from="pointcloud" to="/$(arg mav_name)/dense_stereo/pointcloud"/>
      <remap from="freespace_pointcloud" to="/$(arg mav_name)/dense_stereo/freespace_pointcloud"/>

      <param name="use_freespace_pointcloud" value="true" />
      <param name="use_tf_transforms"        value="true"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
      <param name="publish_pointclouds" value="false"/>
      <param name="publish_traversable" value="false"/>
      <param name="publish_map_incremental" value="true" />
    </node>

    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen" >
      <remap from="pointcloud"  to="pcl" /> <!-- if we do not remap this to an inactive topic, this node will integrate the pointcloud -->
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />
      <param name="publish_traversable" value="false" />

      <param name="esdf_max_distance_m"        value="5.0"/>

      <remap from="odometry" to="/$(arg mav_name)/$(arg odometry_topic)" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
      <param name="verbose" value="$(arg verbose_planner)" />
      <param name="visualize" value="$(arg visualize)" />
      <param name="log_performance" value="$(arg record_data)" />

      <!-- Experiment dependent -->
      <param name="trajectory_evaluator/bounding_volume_args" value="/target_bounding_volume" />
      <param name="trajectory_generator/bounding_volume_args" value="/map_bounding_volume" />

      <!-- Modular Config -->
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>
    </node>

 </group>

</launch>
